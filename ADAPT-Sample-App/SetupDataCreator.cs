using System.Xml;
using ADAPT_Sample_App.SetupData;
using AgGateway.ADAPT.ApplicationDataModel.ADM;
using AgGateway.ADAPT.ApplicationDataModel.Common;
using AgGateway.ADAPT.ApplicationDataModel.Logistics;
using UniqueId = AgGateway.ADAPT.ApplicationDataModel.Common.UniqueId;

namespace ADAPT_Sample_App
{
    public class SetupDataCreator
    {
        public ApplicationDataModel PopulateDataModel()
        {
            var applicationDataModel = new ApplicationDataModel
            {
                Catalog = new Catalog()
            };
            var field = AddClientFarmField(applicationDataModel.Catalog);
            new BoundaryCreator().AddBoundary(field, applicationDataModel.Catalog);
            return applicationDataModel;
        }

        private Field AddClientFarmField(Catalog catalog)
        {
            var grower = new Grower
            {   // Note that names/descriptions are limited to 20 characters. Longer names may be truncated by the plugin.
                // This limit applies to all setup objects.
                Name = "Client"
            };
            catalog.Growers.Add(grower);

            var farm = new Farm
            {
                Description = "Farm",
                // ReferenceId is a temporary numeric Id that is auto-generated by the ADAPT framework.
                GrowerId = grower.Id.ReferenceId
            };
            catalog.Farms.Add(farm);
            
            var field = new Field
            {
                Description = "Field",
                FarmId = farm.Id.ReferenceId
            };
            // While ReferenceId is a temporary numeric id, you can also specify your own Id's. 
            // A UniqueId supports UUID, long, string, and URI id's. Where possible the Deere plugins will retain the provided id.
            var fieldId = new UniqueId
            {
                Id = "d3b70893-5233-4e20-9f6b-6980a37f38c5",
                IdType = IdTypeEnum.UUID
            };
            field.Id.UniqueIds.Add(fieldId);
            catalog.Fields.Add(field);

            return field;
        }
    }
}